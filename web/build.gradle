buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap-1.2" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'com.moowork.node'

node {
    download = true
    version = '8.9.1'
}

dependencies {
    expectedBy project(":shared")
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version"

    testCompile "org.jetbrains.kotlin:kotlin-test-js"
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions {
        sourceMap = true
        sourceMapEmbedSources = "always"
        moduleKind = "umd"
    }
}

task buildBundle(type: NpmTask, dependsOn: [yarn, runDceKotlinJs]) {
    args = ["run", "bundle"]
}

assemble.dependsOn buildBundle

// Test
task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

task fixJsForAsyncTest(type: Task, dependsOn: [runDceTestKotlinJs, populateNodeModules]) {
    doLast {
        File file = new File(compileTestKotlin2Js.outputFile)

        if (file.exists()) {
            File fileOut = new File(compileTestKotlin2Js.outputFile + ".fix.js")

            def timeout = 2000
            fileOut.text = file.text.replaceAll(
                    /(?m)(?s)test\('(.*?)', false, function \(\) \{\s*(.*?);\s*\}\);/,
                    'test("$1", false, function() { this.timeout(' + timeout + '); var res = $2; return (res instanceof Promise) ? res : undefined; });')

        }
    }
}

task runTestInNode(type: NpmTask, dependsOn: [fixJsForAsyncTest, yarn]) {
    args = ["run", "test"]
}

test.dependsOn runTestInNode